// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id    Int      @id @default(autoincrement())
  name  String   @db.VarChar(255)
  username  String   @unique
  password  String   @db.VarChar(255)
  bio   String?    @db.Text //for longer text content
  birthday   DateTime   @db.Date
  profilepic   String? //filepath here??
  //create posts, comments, and likes
  //each post has a sender and a receiver (both can be same person, work with that)
  postto Post[]   @relation("sender")
  postfrom Post[]  @relation("receiver")
  comments  Comment[]
  likes   Like[]
  //the users in this users' friends list
  contacts  User[]   @relation("UserFriends")
  //the users who have this user in their friends list
  contactof User[]  @relation("UserFriends")
  //the person sending the friend request
  requestfrom   Request [] @relation("requestsender")
  // the person receiving the friend request
  requestto  Request[]  @relation("requestreceiver")
  //NOTIFICATIONS????
}

model Post {
  id    Int      @id @default(autoincrement())
  content  String
  //send a post (post on wall). Can send to own wall and be both
  sender  User @relation("sender",fields: [senderId], references: [id], onDelete: Cascade)
  senderId  Int
  receiver  User @relation("receiver",fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId  Int
  sendTime  DateTime  @default(now())
  comments   Comment[]
  likes   Like[]
}

model Comment {
  id    Int      @id @default(autoincrement())
  author    User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId    Int
  post   Post    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId   Int
  // likes  Like[]

  createdAt  DateTime  @default(now())
  content   String  
}

model Like {
  id    Int      @id @default(autoincrement())
  //person who liked
  author    User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId    Int
  //liking a post
  postlike   Post    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId   Int
  //liking a comment
  // commentlike  Comment   @relation(fields: [commentId], references: [id])
  // commentId   Int
  createdAt  DateTime  @default(now())

  @@unique([authorId, postId])
}

model Request {
  id    Int      @id @default(autoincrement())
  //the user who sent the friend request
  requestfrom   User @relation("requestsender",fields: [requestfromId], references: [id])
  requestfromId Int
  //the user receiving the request
  requestto User @relation("requestreceiver",fields: [requesttoId], references: [id] )
  requesttoId Int

  //so the request can only exist once
  @@unique([requestfromId, requesttoId])
}


